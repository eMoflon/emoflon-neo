grammar org.emoflon.neo.emsl.EMSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate eMSL "http://www.emoflon.org/neo/emsl/EMSL"

/* An EMSL consists of a set of imports and entities */
EMSL_Spec:
	imports+=ImportStatement* entities+=Entity*;

/* Other EMSL files can be imported, optionally via an alias to resolve name clashes of entities in the imported files */
ImportStatement:
	'import' value=STRING ('as' alias=ID)?;

/* EMSL entities cover metamodelling and graph transformation */
Entity:
	Metamodel | Pattern | Constraint | GraphGrammar | TripleGrammar | Model | Rule | TripleRule;

/*-------------------------------------------------*/
/*------------------- Models ----------------------*/
/*-------------------------------------------------*/
Model:
	(abstract?='abstract')? 'model' name=QualifiedName 
	('->' (superRefinementTypes+=RefinementCommand (',' superRefinementTypes+=RefinementCommand)*))? 
	('{' nodeBlocks+=ModelNodeBlock* '}')?;

ModelNodeBlock:
	(action=Action)? name=ID ':' type=[MetamodelNodeBlock|QualifiedName]
	('{'
	(properties+=ModelPropertyStatement | relations+=ModelRelationStatement)*
	'}')?;

ModelPropertyStatement:
	('~' inferredType=ID | '.' type=[MetamodelPropertyStatement|ID]) op=ConditionOperator value=ValueExpression;

ValueExpression:
	Value | BinaryExpression | Parameter
;

Parameter:
	'<' name=ID '>'
;

Value:
	AttributeExpression | EnumValue | PrimitiveInt | PrimitiveBoolean | PrimitiveString | PrimitiveDouble
;

PrimitiveDouble:
	literal=DOUBLE
;

DOUBLE returns ecore::EDouble:
	INT '.' INT
;


BinaryExpression:
	left=Value op=ValueOperator right=Value
;

enum ValueOperator:
	PLUS  =  '+' |
	MINUS =  '-' |
	MUL = '*' |
	DIV = '/'
;

AttributeExpression:
	node=[ModelNodeBlock|ID] target=AttributeExpTarget
;

AttributeExpTarget:
	LinkAttributeExpTarget | NodeAttributeExpTarget
;

LinkAttributeExpTarget:
	'::-' link=[MetamodelRelationStatement|ID] '->' target=[ModelNodeBlock|ID] '::' attribute=[MetamodelPropertyStatement|ID]
;

NodeAttributeExpTarget:
	 '::' attribute=[MetamodelPropertyStatement|ID]
;

EnumValue:
	literal=[EnumLiteral|ID]
;

PrimitiveInt:
	literal=INT
;

PrimitiveString:
	literal=STRING
;

PrimitiveBoolean:
	True?='true' | {PrimitiveBoolean} 'false'
;

ModelRelationStatement:
	(action=Action)? 
	'-' 
		(name=ID ":")? types+=ModelRelationStatementType ('|' types+=ModelRelationStatementType)*
		('(' lower=MultiplicityValue '..' upper=MultiplicityValue ')')?
	'->' (target=[ModelNodeBlock|QualifiedName] | '$' proxyTarget=ID)
	('{'
	properties+=ModelPropertyStatement*
	'}')?;
	
ModelRelationStatementType:
	type=[MetamodelRelationStatement|QualifiedName]
;

/*-------------------------------------------------*/
/*----------------- Metamodels --------------------*/
/*-------------------------------------------------*/
Metamodel:
	'metamodel' name=QualifiedName 
	('{' (nodeBlocks+=MetamodelNodeBlock | enums+=Enum)* '}')?;

MetamodelNodeBlock:
	(abstract?='abstract')? name=ID
	(':' superTypes+=[MetamodelNodeBlock|QualifiedName] (',' superTypes+=[MetamodelNodeBlock|QualifiedName])*)?
	('{'
	(properties+=MetamodelPropertyStatement | relations+=MetamodelRelationStatement)*
	'}')?;

MetamodelPropertyStatement:
	'.' name=ID ':' type=DataType;

MetamodelRelationStatement:
	kind=RelationKind name=ID
	'(' lower=MultiplicityValue '..' upper=MultiplicityValue ')' '->' (target=[MetamodelNodeBlock|QualifiedName])
	('{'
	properties+=MetamodelPropertyStatement*
	'}')?;

MultiplicityValue:
	INT | "*";

enum RelationKind:
	REFERENCE='-' | AGGREGATION='<>-' | COMPOSITION='<+>-';

Enum:
	'enum' name=QualifiedName '{'
	literals+=EnumLiteral+
	'}';

EnumLiteral:
	name=ID;

DataType:
	BuiltInType | UserDefinedType;

BuiltInType:
	reference=BuiltInDataTypes;

UserDefinedType:
	reference=[Enum|QualifiedName];

enum BuiltInDataTypes:
	EBOOLEAN='EBoolean'
	| ESTRING='EString'
	| ECHAR='EChar'
	| EINT='EInt'
	| EDOUBLE='EDouble'
	| ELONG='ELong'
	| EFLOAT='EFloat'
	| EDATE='EDate';

/*-------------------------------------------------*/
/*------------------ Patterns ---------------------*/
/*-------------------------------------------------*/
AtomicPattern:
	(abstract?='abstract')? 'pattern' name=QualifiedName
	('->' (superRefinementTypes+=RefinementCommand (',' superRefinementTypes+=RefinementCommand)*))?
	('{'
	nodeBlocks+=ModelNodeBlock*
	'}')?;

Pattern:
	body=AtomicPattern ('when' condition=Condition)?;

Condition:
	AtomicConstraint | ConstraintReference;

AtomicConstraint returns ConstraintBody:
	NegativeConstraint | PositiveConstraint | Implication;

NegativeConstraint:
	'forbid' pattern=[AtomicPattern|QualifiedName];

PositiveConstraint:
	'enforce' pattern=[AtomicPattern|QualifiedName];

Implication:
	'if' premise=[AtomicPattern|QualifiedName] 'then' conclusion=[AtomicPattern|QualifiedName];

ConstraintReference:
	(negated?='!')? reference=[Constraint|QualifiedName];

Constraint:
	(abstract?='abstract')? 'constraint' name=QualifiedName '=' body=(AtomicConstraint | OrBody);

OrBody:
	children+=AndBody ('||' children+=AndBody)*;

AndBody:
	children+=Primary ('&&' children+=Primary)*;

Primary:
	ConstraintReference | '(' OrBody ')';

ConstraintBody: OrBody | AndBody | Primary;

/*-------------------------------------------------*/
/*------------------- Rules -----------------------*/
/*-------------------------------------------------*/
Rule:
	(abstract?='abstract')? 'rule' name=QualifiedName
	('->' (superRefinementTypes+=RefinementCommand (',' superRefinementTypes+=RefinementCommand)*))?
	('{'
	nodeBlocks+=ModelNodeBlock*
	'}')? ('when' condition=Condition)?;

GraphGrammar:
	(abstract?='abstract')? 'grammar' name=QualifiedName '{'
	rules+=[Rule|QualifiedName]+
	'}';

/*-------------------------------------------------*/
/*---------------- Triple Rules -------------------*/
/*-------------------------------------------------*/
TripleRule:
	(abstract?='abstract')? 'tripleRule' name=QualifiedName ':' type=[TripleGrammar|QualifiedName]
	('->' (superRefinementTypes+=RefinementCommand (',' superRefinementTypes+=RefinementCommand)*))?
	('{'
	('source' '{' srcNodeBlocks+=ModelNodeBlock* '}')?
	('target' '{' trgNodeBlocks+=ModelNodeBlock* '}')?
	('correspondence' '{' correspondences+=Correspondence* '}')?
	'}')? ('forbid' nacs+=TripleRuleNAC ('&&' nacs+=TripleRuleNAC)*)?;

Correspondence:
	((action=Action)?
	(source=[ModelNodeBlock|QualifiedName] | '$' proxySource=ID)
	'<-' ':' type=[CorrespondenceType|QualifiedName] '->'
	(target=[ModelNodeBlock|QualifiedName] | '$' proxyTarget=ID));

CorrespondenceType:
	source=[MetamodelNodeBlock|QualifiedName] '<-' name=QualifiedName '->' target=[MetamodelNodeBlock|QualifiedName];

TripleRuleNAC:
	SourceNAC | TargetNAC;

SourceNAC:
	'src(' pattern=[AtomicPattern|QualifiedName] ')';

TargetNAC:
	'trg(' pattern=[AtomicPattern|QualifiedName] ')';

TripleGrammar:
	(abstract?='abstract')? 'tripleGrammar' name=QualifiedName '{'
	'source' '{' srcMetamodels+=[Metamodel|QualifiedName]* '}'
	'target' '{' trgMetamodels+=[Metamodel|QualifiedName]* '}'
	'correspondence' '{' correspondences+=CorrespondenceType* '}'
	('rules' '{' rules+=[TripleRule|QualifiedName]* '}')?
	'}'
;

/*-------------------------------------------------*/
/*------------------- Common ----------------------*/
/*-------------------------------------------------*/
RefinementCommand:
	referencedType=[SuperType|QualifiedName] ('[' relabeling+=ModelRelabelingCommand (',' relabeling+=ModelRelabelingCommand)* ']')?;

ModelRelabelingCommand returns RelabelingCommand:
	oldLabel=ID '->' newLabel=ID;

SuperType:
	Model | AtomicPattern | Rule | TripleRule;

QualifiedName:
	ID ('.' ID)*;

Action:
	op=ActionOperator;

enum ActionOperator:
	CREATE='++' | DELETE='--';

enum ConditionOperator:
	NOTEQ='!=' | LESS='<' | LESSEQ='<=' | EQ=':' | GREATER='>' | GREATEREQ='>=' | ASSIGN=':=';


