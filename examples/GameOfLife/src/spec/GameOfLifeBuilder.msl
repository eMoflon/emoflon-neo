import "platform:/resource/GameOfLife/src/spec/GameOfLifeRules.msl"

rule createTopLeftCorner {
	++ cell:Cell {
		.row := 0
		.col := 0
		.alive := false
	}
}

rule createCellsInFirstRow {
	left:Cell {
		.row : 0
		
		++ -neighbours->cell
	}
	
	++ cell:Cell {
		.row := 0
		.col := left::col + 1
		.alive := false
		
		++ -neighbours->left
	}
} when forbid alreadyHasRightNeighbour

pattern alreadyHasRightNeighbour {
	left:Cell {
		-neighbours->otherCell
	}
	
	otherCell:Cell {
		.row : 0
		.col > left::col
	}
}

rule createCellsInFirstCol {
	top:Cell {
		.col : 0
		
		++ -neighbours->cell
	}
	
	++ cell:Cell {
		.col := 0
		.row := top::row + 1
		
		.alive := false
		
		++ -neighbours->top
	}
} when forbid alreadyHasBottomNeighbour

pattern alreadyHasBottomNeighbour {
	top:Cell {
		-neighbours->otherCell
	}
	
	otherCell:Cell {
		.col : 0
		.row > top::row
	}
} 

rule createAllOtherCells {
	left:Cell {
		.col : top::col - 1
		-neighbours->topLeft
		++ -neighbours->newCell
	}
	
	top:Cell {
		.row : topLeft::row
		-neighbours->topLeft
		++ -neighbours->newCell
	}
	
	topLeft:Cell {
		.row : left::row - 1
		.col : top::col - 1
		-neighbours->top
		-neighbours->left
		++ -neighbours->newCell
	}
	
	++ newCell:Cell {
		.row := left::row
		.col := top::col
		
		.alive := false
		
		++ -neighbours->top
		++ -neighbours->left
		++ -neighbours->topLeft
	}
} when forbid otherCell

pattern otherCell {
	left:Cell {
		.col : top::col - 1
	}
	
	top:Cell {
		.row : topLeft::row
	}
	
	topLeft:Cell {
		.row : left::row - 1
		.col : top::col - 1
	}
	
	otherCell:Cell {
		.row : left::row
		.col : top::col
		
		-neighbours->top
		-neighbours->left
		-neighbours->topLeft
	}
}

rule createDiagonals {
	upRight:Cell {
		.row : downLeft::row - 1
		.col : downLeft::col + 1
		
		++ -neighbours->downLeft
	}
	
	downLeft:Cell {
		++ -neighbours->upRight
	}
} when forbid alreadyConnected

pattern alreadyConnected {
	upRight:Cell {
		-neighbours->downLeft
	}
	
	downLeft:Cell {
		-neighbours->upRight
	}
}

pattern aLiveCell {
	cell:Cell {
		.alive : true
	}
}

rule makeCellAlive {
	cell:Cell {
		.alive := true
	}
}