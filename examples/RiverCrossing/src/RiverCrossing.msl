metamodel RiverCrossing {
	
	Board {
		-figure(4..4)->Figure
		-side(2..2)->RiverSide
	}
	
	Figure {
		-eats(0..1)->Figure
		-on(1..1)->RiverSide
	}
	
	RiverSide {
		-opposite(1..1)->RiverSide
		.side: EString
	}
	
	Farmer : Figure
	Goat: Figure
	Wolf: Figure
	Cabbage: Figure
	
}

model RiverCrossingStart {

	b: Board {
		-figure-> f
		-figure-> g
		-figure-> c
		-figure-> w
		-side->r1
		-side->r2
	}
	
	r1: RiverSide {
		-opposite->r2
		.side: "A"
	}
		
	r2: RiverSide {
		-opposite->r1
		.side: "B"
	}
				
	f: Farmer {
		-on->r1
	}
	g: Goat {
		-eats->c
		-on->r1
	}
	w: Wolf {
		-eats->g
		-on->r1
	}
	c: Cabbage {
		-on->r1
	}
}


pattern oneEatsAnother {
	b:Board {
		-figure->f
		-figure->f2
		-figure->f3
		-side->r1
		-side->r2
	}
	r1: RiverSide
	r2: RiverSide
	
	f: Farmer {
		-on->r1
	}
	
	f2: Figure {
		-eats->f3
		-on->r2
	}
	f3: Figure {
		-on->r2
	}
}

pattern oneEatsAnotherAfterTransport {
	b:Board {
		-figure->f
		-figure->f2
		-figure->f3
		-side->r1
	}
	r1: RiverSide
	
	f1: Figure
	
	f: Farmer {
		-on->r1
	}
	
	f2: Figure {
		-eats->f3
		-on->r1
	}
	f3: Figure {
		-on->r1
	}
}

constraint forbidOneEatsAnother = forbid oneEatsAnother
constraint enforceOneEatsAnother = enforce oneEatsAnotherAfterTransport

rule moveEmptyToOtherSide {
	
	b: Board {
		-figure->f
		-side->r1
		-side->r2
	}
	
	r1: RiverSide
	
	r2: RiverSide
	
	f: Farmer {
		-- -on->r1
		++ -on->r2
	}
	
} when !enforceOneEatsAnother

abstract rule moveOneFigureToOtherSide {
	
	b: Board {
		-figure->f
		-figure->f1
		-side->r1
		-side->r2
	}
	
	r1: RiverSide
	
	r2: RiverSide
	
	f: Farmer {
		-- -on->r1
		++ -on->r2
	}
	f1: Figure {
		-- -on->r1
		++ -on->r2
	}
	
} 

rule moveWolfToOtherSide -> moveOneFigureToOtherSide {
	f1: Wolf
} when !enforceOneEatsAnother

rule moveGoatToOtherSide -> moveOneFigureToOtherSide {
	f1: Goat
} when !enforceOneEatsAnother

rule moveCabbageToOtherSide -> moveOneFigureToOtherSide {
	f1: Cabbage
} when !enforceOneEatsAnother

pattern puzzleSolved {
	b:Board {
		-figure -> f
		-figure -> g
		-figure -> c
		-figure -> w
		-side-> r1
		-side-> r2
	}
	
	f: Farmer {
		-on -> r2
	}
	g: Goat {
		-on -> r2
	}
	c: Cabbage {
		-on -> r2
	}
	w: Wolf {
		-on -> r2
	}
	
	r1: RiverSide {
		.side: "A"
	}
	r2: RiverSide {
		.side: "B"
	}
}

constraint gameEnded = enforce puzzleSolved