import "platform:/resource/SokobanLanguage/src/metamodels/SokobanLanguage.msl"

// BoardPattern.gt

pattern sokobanOnFieldOfBoard {
	
	b:SokobanLanguage.Board {
		-selectedFigure->sokoban
		-fields->f1 {
			.col: 0
			.row: 0
		}
		-fields->f2 {
			.col: 1
			.row: 0
		}
	}
	f1:Field {
		-right->f2
		.endPos: false
	}
	f2:Field {
		.endPos: false
	}
	sokoban:Sokoban {
		-field->f1
	}
	
}

pattern blockOnEndField {
    b:Block {
        -field->f
    }
    f:Field {
        .endPos:true
    }
}
pattern blockOnEndFieldWithRight {
    b:Block {
        -field->f
    }
    f:Field {
        -right->fR
    }
    fR: Field {
    	.endPos: true
    }
}
pattern blockOnNoEndField {
    b:Block {
        -field->f
    }
    f:Field {
        .endPos:false
    }
}

constraint enforceBlockOnEndField = enforce blockOnEndField
constraint enforceBlockOnNoEndField = enforce blockOnNoEndField
constraint forbidBlockOnNoEndField = forbid blockOnNoEndField

constraint gameFinished = forbidBlockOnNoEndField || (enforceBlockOnNoEndField && enforceBlockOnEndField)

pattern oneSokoban {
	sokoban : Sokoban
}

pattern twoSokoban {
	sokoban: Sokoban
	sokoban2: Sokoban
}
 
pattern oneSokobanSelectedFigureRequired {
	sokoban : Sokoban
} when enforce selectedFigureRequired

constraint noSokoban = forbid oneSokoban
constraint oneSokobans = enforce oneSokoban
constraint twoSokobans = enforce twoSokoban

constraint hasOneSokoban = oneSokobans && !twoSokobans

constraint sokobanIsSelectedFigure = if oneSokoban then selectedFigureRequired

constraint ifSokobanSelectedFigureThenOnField = if selectedFigureRequired then sokobanOnField

pattern selectedFigureRequired {
	b:SokobanLanguage.Board {
		-selectedFigure->sokoban
	}
	sokoban:Sokoban
}

pattern sokobanOnField {
	sokoban:Sokoban {
		-field->f
	}
	f:Field
}


pattern oneBlock {
	block : Block
}

pattern oneNormalField {
	f:Field
} when enforce oneNeighborField

pattern oneNormalFieldNeg {
	f:Field
} when forbid oneNeighborField

pattern oneNeighborField {
	f:Field {
		-right->f2
	}
	f2:Field
}

rule oneExtraField {
	f:Field {
		-- -right-> oldF
		++ -right-> newF
	}
	-- oldF:Field
	++ newF:Field
}

pattern oneEndField {
	field : Field {
		.endPos : true
	}
}

pattern oneBoardWithField {
	b:SokobanLanguage.Board {
		-fields->f
	}
	f:Field
}

rule oneBoardWithNewField {
	b:SokobanLanguage.Board {
		-- -fields->f1
		-fields->f2
		++ -fields->f3
	}
	-- f1:Field
	f2:Field
	++ f3:Field
}

pattern anOccupiedField {
	field : Field
	
	fig : Figure {
		-field-> field
	}
}

pattern anOccupiedSokobanField {
	field : Field
	
	fig : Sokoban {
		-field-> field
	}
}

pattern anOccupiedBlockField {	
	field : Field
	
	fig : Block	{
		-field-> field
	}
}

pattern anOccupiedBoulderField {
	field : Field
	
	fig : Boulder {
		-field-> field
	}	
}

pattern byBlockAndBoulderOccupiedFields -> anOccupiedBlockField, 
	anOccupiedBoulderField [field -> otherField,fig -> otherFig]

pattern allFieldsInARow {
	b : SokobanLanguage.Board {
		-fields -> field {
			.row : 1
		}
	}
	field : Field
}

abstract pattern fieldsInARow {
	b : SokobanLanguage.Board {
		-fields -> field 
		-fields -> fieldL 
		-fields -> fieldR 
	}
	field : Field {
		-right -> fieldR
	}
	
	fieldL : Field {
		-right -> field
	}
	
	fieldR : Field
}

pattern allNotBorderFieldsInARow -> fieldsInARow {
	b : SokobanLanguage.Board {
		-fields -> $field {
			.row : 1
		}
		-fields -> $fieldL {
			.row : 1
		}
		-fields -> $fieldR {
			.row : 1
		}
	}
}

pattern allNotBorderFieldsInARowAndCol -> fieldsInARow {
	b : SokobanLanguage.Board {
		-fields -> $field {
			.row : 1
			.col : 2
		}
		-fields -> $fieldL {
			.row : 1
			.col : 1
		}
		-fields -> $fieldR {
			.row : 1
			.col : 3
		}
	}
}

pattern allNotBorderFieldsInDiffRows -> fieldsInARow {
	b : SokobanLanguage.Board {
		-fields -> $field {
			.row : 4
			.col : 2
		}
		-fields -> $fieldL {
			.row : 1
		}
		-fields -> $fieldR {
			.row : 1
		}
	}
}

pattern all3x3Fields {
	b: SokobanLanguage.Board {
		-fields -> field11
		-fields -> field12
		-fields -> field13
		-fields -> field21
		-fields -> field22
		-fields -> field23
		-fields -> field31
		-fields -> field32
		-fields -> field33
	}
	field11 : Field {
		-right -> field12
		-bottom -> field21
	}
	field12 : Field {
		-right -> field13
		-bottom -> field22
	}
	field13 : Field {
		-bottom -> field23
	}
	field21 : Field {
		-right -> field22
		-bottom -> field31
	}
	field22 : Field {
		-right -> field23
		-bottom -> field32
	}
	field23 : Field {
		-bottom -> field33
	}
	field31 : Field {
		-right -> field32
	}
	field32 : Field {
		-right -> field33
	}
	field33 : Field 
}

pattern all2x2Fields {
	b: SokobanLanguage.Board {
		-fields -> field11
		-fields -> field12
		-fields -> field21
		-fields -> field22
	}
	
	field11 : Field {
		-right -> field12
		-bottom -> field21
	}
	
	field12 : Field {
		-bottom -> field22
	}
	
	field21 : Field {
		-right -> field22
	}
	
	field22 : Field
}

pattern boulderOnEndField -> oneEndField, anOccupiedField {
	fig : Boulder
} when forbid block

pattern block {
	fig: Block
}

pattern blockNotOnEndFieldInCorner -> anOccupiedField {
	field: Field {
		.endPos : false
		
	}
	fig: Block {
		-field->field
	}

} when noCorner

pattern blockOnFieldCond {
	field: Field {
		.endPos : false
	}
	fig: Block {
		-field->field
	}
} when relevantConstr

constraint forbidLeftSide = forbid hasLeft
constraint forbidTopSide = forbid hasTop
constraint forbidRightSide = forbid hasRight
constraint forbidBottomSide = forbid hasBottom

constraint enforceHasLeft = enforce hasLeft
constraint forbidHasTop = forbid hasTop
constraint relevantConstr = enforceHasLeft || (!enforceHasLeft && forbidHasTop)

constraint topLeftCorner = forbidLeftSide && forbidTopSide
constraint topRightCorner = forbidRightSide && forbidTopSide
constraint bottomLeftCorner = forbidLeftSide && forbidBottomSide
constraint bottomRightCorner = forbidRightSide && forbidBottomSide

constraint noCorner = topLeftCorner || topRightCorner || bottomLeftCorner || bottomRightCorner

constraint extremeConstraint = ((!topLeftCorner && topRightCorner) || !topRightCorner) && !bottomLeftCorner && (bottomRightCorner || (!bottomLeftCorner || (!topRightCorner && !topRightCorner)))

pattern hasLeft {
	field: Field
	
	leftField: Field {
		-right-> field
	}
}

pattern hasTop {
	field: Field
	
	topField: Field {
		-bottom-> field
	}
}

pattern hasRight {
	field: Field {
		-right->rightField
	}
	rightField: Field
}

pattern hasBottom {
	field: Field {
		-bottom->bottomField
	}
	bottomField: Field
}


// RulesForMovingSokoban.gt

pattern occupiedField {
	fig : Figure {
		-field-> to
	}
	to : Field
}

pattern occupiedNext -> occupiedField [to -> next] { }

abstract rule moveSokoban {
	from : Field
	
	to : Field
	
	sok : Sokoban {
		-- -field-> from
		++ -field-> to
	}
	
	b:SokobanLanguage.Board {
		-fields->to
		-fields-> from
	}
	
}

abstract rule pushBlock {
	to : Field
	
	next : Field
	
	block : Block {
		-- -field-> to
		++ -field-> next
	}
}

// up
rule moveSokobanUp -> moveSokoban {
	to : Field {
		-bottom-> $from
	}
}

rule moveSokobanUpWithCondition -> moveSokobanUp
	when forbid occupiedField

rule pushBlockUp -> pushBlock, moveSokobanUp {
	next : Field {
		-bottom-> to 
	}
	to : Field {
		-bottom-> $from
	}
} when forbid occupiedNext

// down
rule moveSokobanDown -> moveSokoban {
	from : Field {
		-bottom-> $to
	}
}

rule moveSokobanDownWithCondition -> moveSokobanDown
	when forbid occupiedField
	
rule pushBlockDown -> pushBlock, moveSokobanDown {
	to : Field {
		-bottom-> $next
	}
} when forbid occupiedNext

// right
rule moveSokobanRight -> moveSokoban {
	from : Field {
		-right-> $to
	}
}

rule moveSokobanRightWithCondition -> moveSokobanRight
	when forbid occupiedField
	
rule pushBlockRight -> pushBlock, moveSokobanRight {
	to : Field {
		-right-> $next
	}
} when forbid occupiedNext

// left
rule moveSokobanLeft -> moveSokoban {
	to : Field {
		-right-> $from
	}
}

rule moveSokobanLeftWithCondition -> moveSokobanLeft
	when forbid occupiedField
	
rule pushBlockLeft -> pushBlock, moveSokobanLeft {
	next : Field {
		-right-> $to
	}
} when forbid occupiedNext


	
	
rule forTestOnlyMoveSokobanDownAndNewNodes -> moveSokoban {
	from : Field {
		-bottom-> $to
	}
	
	++ f1: Field {
		++ -right-> from
		.endPos := true
	}
	
	++next2 : Block {
		++ -field-> f1
	}
	++next3 : Boulder {
		++ -field -> from
	}
}

rule moveSokobanRightWhenForbidOccupiedField {
	b: SokobanLanguage.Board {
		-fields -> from
		-fields -> to
	}
	
	from: Field {
		-right -> to
	}
	to: Field
	
	sok: Sokoban {
		-- -field -> from
		++ -field -> to
	}
	
	++ boulder: Boulder {
		++ -field -> from
	}
} when forbid occupiedField

rule forTestOnlymoveSokobanDownWithConditionAndNewNodes -> moveSokobanDown
	when forbid occupiedField

pattern oneField {
	f:Field
} when hasBottomAndRightField

pattern oneFieldNeg {
	f:Field
} when !hasBottomAndRightField

pattern oneFieldEnforceTwo {
	f:Field
} when enforce oneTwoField

pattern oneFieldForbidTwo {
	f:Field
} when forbid oneTwoField

pattern twoField {
	f:Field
	f2:Field
}

pattern fourField {
	f1:Field
	f2:Field
	f3:Field
	f4:Field
}
pattern oneTwoField {
	f:Field {
		-bottom -> f2
	}
	f2:Field
}

pattern oneFieldHasBottomAndRight {
	f:Field
} when hasBottomAndRightField
pattern oneFieldHasNoBottomOrNoRight {
	f:Field
} when !hasBottomAndRightField

pattern oneFieldHasBottomAndNoRight {
	f:Field
} when hasBottomAndNoRightField


pattern neighborRightField {
	f:Field {
		-right -> f2
	}
	f2:Field
}
pattern neighborBottomField {
	f:Field {
		-bottom -> f2
	}
	f2:Field
}
pattern neighborRightField2 {
	f:Field {
		-right -> f3
	}
	f3:Field
}
constraint hasRightField = enforce neighborRightField
constraint hasBottomField = enforce neighborBottomField
constraint hasBottomAndRightField = hasBottomField && hasRightField
constraint hasBottomAndNoRightField = hasBottomField && !hasRightField

constraint twoConnFields = enforce neighborBottomField
constraint ifTwoThenConn = if twoField then neighborBottomField
constraint ifBottomThenRight = if neighborBottomField then neighborRightField2

constraint hasRightIfThen = if neighborRightField then neighborBottomField

pattern sokOnField {
	sok:Sokoban {
		-field -> f
	}
	f: Field
}
pattern blockOnField {
	b:Block {
		-field-> f
	}
	f:Field
}
constraint sokOnFieldThenBlockOnField = if sokOnField then blockOnField



rule moveSokobanDownTest -> moveSokoban {
	to : Field {
		-bottom(1..2)-> $from
	}
} when forbid byOwnColourOccupiedField

pattern byOwnColourOccupiedField {
	blockingFig : Figure {
		-field-> to
	}
	
	fig : Figure
	
	to : Field
}

pattern patternMoveSokobanDownTest {
	from : Field {
		-bottom(1..2)-> to
	}
	to : Field 
	
} when forbid byOwnColourOccupiedField

pattern boulderButNoBlock {
	fig: Boulder
} when forbid isBlock

pattern isBlock {
	fig: Block
}

pattern twoBoulderButNoTwoBlock {
	fig1: Boulder
	fig2: Boulder
} when forbidIsTwoBlock

pattern isTwoBlock {
	fig1: Block
	fig2: Block
}

constraint forbidIsTwoBlock = forbid isTwoBlock

pattern twoBoulderButTwoBlock {
	fig1: Boulder
	fig2: Boulder
} when !forbidIsTwoBlock

pattern oneBlock1 {
	fig1: Block
} when enforce oneOtherBlock1

pattern oneOtherBlock1 {
	fig2: Block
}

pattern oneBlock2 {
	fig1: Block
	fig2: Block
} when enforce oneOtherBlock2

pattern oneOtherBlock2 {
	fig2: Block
	fig3: Block
	fig4: Block
}

pattern oneOtherBlock2a {
	fig2: Block
	fig4: Block
	fig6: Block
}

constraint enfOneOtherBlock2 = enforce oneOtherBlock2
constraint enfOneOtherBlock3 = enforce oneOtherBlock2a
constraint enforceCombi = enfOneOtherBlock2 && enfOneOtherBlock3

pattern oneBlock2Combi {
	fig1: Block
	fig2: Block
} when enforceCombi

pattern neighbouringFields {
	f1 : Field {
		-e : right|bottom-> f2
	}
	f2 : Field
}

pattern evenMoreNeighbouringFields -> neighbouringFields, neighbouringFields [f1 -> f3, f2 -> f4] {
	f2 : Field {
		-e : bottom|right-> $f3
	}
}

pattern oneFieldWithBlock {
	f:Field
} when enforce fieldWithBlock

pattern oneFieldWithNoBlock {
	f:Field
} when forbid fieldWithBlock

pattern fieldWithBlock {
	block:Block {
		-field -> f1
	}
	f1:Field
}

pattern testAttrExpression {
	b:SokobanLanguage.Board {
		-fields -> f {
			.col : 2
			.col > 0
			.col >= 1
			.row <= 3
			.row < 4
			.row != 0
		}
	}
	
	f:Field {
		.endPos : true
	}
}

pattern testAttrExpression2 {
	b:SokobanLanguage.Board {
		-fields -> f {
			.col : 2
			.col > 0
			.col >= 0
			.row <= 99
			.row < 100
			.row != 99
		}
	}
	
	f:Field {
		.endPos : true
	}
}

constraint testConstraintAttrExpression = enforce testAttrExpression
constraint testConstraintAttrExpression2 = forbid testAttrExpression2
constraint testConstraintAttrExpressionNegativ = forbid testAttrExpression
constraint testConstraintAttrExpressionNegated = !testConstraintAttrExpressionNegativ
constraint testConcatenatedConstraintAttrExpression = testConstraintAttrExpression || !testConstraintAttrExpression2

pattern someField {
	f:Field {
		.endPos != false
	}
} when testConcatenatedConstraintAttrExpression

rule testAttributeAssignmentsInRule {
	f:Field {
		.endPos != false
		.endPos := false
	}
}

rule testAttributeAssignmentsWithElementsValueAssign {
	b:SokobanLanguage.Board {
		-fields->f {
			.row > 1
			.col != 1
		}
		-fields->fEnd {
			.row := b::-fields->f::row + 42
			.col := b::-fields->f::col + 42
		}
	}
	f:Field {
		.endPos : true
		-right->fEnd
	}
	fEnd:Field {
		.endPos : false
		.endPos := f::endPos
	}
}

rule changeToEndField {
	f:Field {
		-right->f1
		.endPos : false
		.endPos := true
		.ename := f1::ename + "b"
	}
	f1:Field
}

rule createThirdSokoban {
	sok1: Sokoban 
	sok2: Sokoban
	f:Field
	++ sok3: Sokoban {
		++ -field->f
	}
}

pattern twoEmptyEndFields {
	f1:Field {
		.endPos: true
	}
	f2:Field {
		.endPos: true
	}
} when enforce connectedField

pattern connectedField {
	f1:Field {
		-bottom->f2
	}
	f2:Field
}

pattern attrCondField {
	b:SokobanLanguage.Board {
		-fields->f {
			.col > 2
			.row > 2
		}
	}
	f:Field
}

pattern attrCondField2 {
	b:SokobanLanguage.Board {
		-fields->f1 {
			.col : 2
			.row : 2
		}
	}
	f1:Field
}
constraint enforceAttrField = enforce attrCondField
constraint enforceAttrField2 = enforce attrCondField2
constraint enforceAttrFieldC = enforceAttrField && enforceAttrField2

pattern attrCondFieldZero {
	b:SokobanLanguage.Board {
		-fields->f2 {
			.col <= 0
			.row <= 0
		}
	}
	f2:Field
} when enforce attrCondField

pattern attrCondFieldZero2 {
	b:SokobanLanguage.Board {
		-fields->f2 {
			.col <= 0
			.row <= 0
		}
	}
	f2:Field
} when enforceAttrFieldC

rule moveBlockUp {
	f1:Field {
		-bottom->f2
	}
	f2:Field
	b1:Block {
		-- -field->f2
		++ -field->f1
	}
	++ b2:Block {
		++ -field->f2
	}
}

pattern oneFieldOnBoard {
	f:Field
}
pattern oneEndFieldOnBoard {
	f:Field {
		.endPos: true
	}
}
constraint ifFieldThenEndField = if oneFieldOnBoard then oneEndFieldOnBoard

pattern oneSpecialBoulder {
	b:Boulder
	b1:Block
}
pattern oneSpecialBlock {
	b:Block
	b2:Block
	
}
constraint ifBoulderThenBlock = if oneSpecialBoulder then oneSpecialBlock

rule removeSokoban {
	-- sok:Sokoban
}

rule removeSokobanWithDanglingEdges {
	-- sok:Sokoban {
		-- -field->f
	}
	
	b:SokobanLanguage.Board {
		-- -selectedFigure->sok
	}
	f:Field
}

pattern test_twoOccupiedFields {
	f1: Field
	f2: Field
} when occF1F2

pattern occF1Field {
	b: Block {
		-field->f1
	}
	f1:Field
}

pattern occF2Field {
	s: Sokoban {
		-field->f2
	}
	f2:Field
}
constraint occF1 = enforce occF1Field
constraint occF2 = enforce occF2Field
constraint occF1F2 = occF1 && occF2


