import "platform:/resource/CompanyToIT/src/metamodels/Company.msl"
import "platform:/resource/CompanyToIT/src/metamodels/IT.msl"

tripleGrammar CompanyToIT {
	source {
		Company
	}
	
	target {
		IT
	}
	
	correspondence {
		Company <- CompanyToIT -> IT
		Admin <- AdminToRouter -> Router
		Employee <- EmployeeToPC -> PC
		Employee <- EmployeeToLaptop -> Laptop
	}
	
	rules {
		CompanyToITRule
		AdminToRouterRule
		EmployeeToPCRule
		EmployeeToLaptopRule
	}
}

tripleRule CompanyToITRule : CompanyToIT {
	source {
		++ ceo : CEO
		++ company : Company {
			.name := <companyName>
			++ -ceo-> ceo
		}
	}
	
	target {
		++ it : IT {
			.name := <companyName>
		}
	}
	
	correspondence {
		++ company <-:CompanyToIT-> it
	}
} forbid src(companyNameIsTaken)

pattern companyNameIsTaken {
	company : Company {
		.name : <companyName>
	}
}

tripleRule AdminToRouterRule : CompanyToIT {
	source {
		company : Company {
			-ceo-> ceo
			++ -admin-> admin
		}
		ceo : CEO
		++ admin : Admin {
			++ -ceo-> ceo
		}
	} 

	target {
		++ router : Router {
			++ -network-> network
		}
		it : IT {
			++ -network-> network
			++ -router-> router
		}
		++ network : Network
	}

	correspondence {
		++ admin <-:AdminToRouter-> router
		company <-:CompanyToIT-> it
	}
} forbid src(AlreadyHasAnAdmin)

pattern AlreadyHasAnAdmin {
	company:Company {
		-admin->other
	}
	
	other:Admin {
		-ceo->ceo
	}
	
	ceo:CEO
}

tripleRule EmployeeToPCRule : CompanyToIT {
	source {
		admin : Admin {
			-ceo-> ceo
		}
		company : Company {
			-admin-> admin
			++ -employee-> employee
			-ceo-> ceo
		}
		ceo : CEO {
			++ -employee-> employee
		}
		++ employee : Employee
	}

	target {
		network : Network {
			++ -pc-> computer
		}
		it : IT {
			-router-> router
			-network-> network
		}
		++ computer : PC
		router : Router {
			-network-> network
		}
	}

	correspondence {
		++ employee <-:EmployeeToPC-> computer
		admin <-:AdminToRouter-> router
		company <-:CompanyToIT-> it
	}
}

tripleRule EmployeeToLaptopRule : CompanyToIT {
	source {
		admin : Admin {
			-ceo-> ceo
		}
		company : Company {
			-admin-> admin
			++ -employee-> employee
			-ceo-> ceo
		}
		ceo : CEO {
			++ -employee-> employee
		}
		++ employee : Employee
	}

	target {
		network : Network {
			++ -laptop-> computer
		}
		it : IT {
			-router-> router
			-network-> network
		}
		++ computer : Laptop
		router : Router {
			-network-> network
		}
	}

	correspondence {
		++ employee <-:EmployeeToLaptop-> computer
		admin <-:AdminToRouter-> router
		company <-:CompanyToIT-> it
	}
}