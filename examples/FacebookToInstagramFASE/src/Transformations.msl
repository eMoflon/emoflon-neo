import "platform:/resource/FacebookToInstagramFASE/src/Facebook.msl"
import "platform:/resource/FacebookToInstagramFASE/src/Instagram.msl"

tripleGrammar FacebookToInstagramGrammar {
	source {
		FacebookLanguage
	}
	
	target {
		InstagramLanguage
	}
	
	correspondence {
		FacebookLanguage.Network <-NetworkToNetwork-> InstagramLanguage.Network
		
		FacebookLanguage.User <-FbUserToInUser-> InstagramLanguage.User
	}
	
	rules {
		// Axiom
		NetworkToNetwork
		
		// User Creation
		UserToUser
		
		// Handle friendship/followership
		RequestFriendship
		AcceptFriendship
	}
}

tripleRule NetworkToNetwork : FacebookToInstagramGrammar {
	source {
		++ fl : Network {
			.description := <networkDesc>
		}
	}
	
	target {
		++ il : Network {
			.description := <networkDesc>
		}
	}
	
	correspondence {
		++ fl <-:NetworkToNetwork-> il
	}
}

tripleRule UserToUser : FacebookToInstagramGrammar {
	source {
		++ fu : User {
			.name := <n>
		}
		
		fn : Network {
			++ -users-> fu
		}
	}
	
	target {
		++ iu : User {
			.name := <n>
		}
		
		in : Network {
			++ -users-> iu
		}
	}
	
	correspondence {
		fn <-:NetworkToNetwork-> in 
		++ fu <-:FbUserToInUser-> iu
	}
}

tripleRule RequestFriendship : FacebookToInstagramGrammar {
	source {
		fu1 : User
		fu2 : User
		fn : Network {
			-users-> fu1
			-users-> fu2
		}
	}
	
	target {
		in : Network {
			-users-> iu1
			-users-> iu2
		}
		
		iu1 : User {
			++ -follows-> iu2
		}
		
		iu2 : User
	}
	
	correspondence {
		fn <-:NetworkToNetwork-> in 
		fu1 <-:FbUserToInUser-> iu1
		fu2 <-:FbUserToInUser-> iu2
	}
} forbid trg(NoDoubleFollows) && trg(NoOppositeFollows)

pattern NoDoubleFollows {
	iu1:InstagramLanguage.User {
		-follows->iu2
	}
	
	iu2:InstagramLanguage.User
}

pattern NoOppositeFollows -> NoDoubleFollows[iu1 -> iu2, iu2 -> iu1]

tripleRule AcceptFriendship : FacebookToInstagramGrammar {
	source {
		fu1 : User
		fu2 : User
		fn : Network {
			-users-> fu1
			-users-> fu2
			++ -friendships->fri
		}
		
		++ fri : Friendship {
			++ -friends-> fu1
			++ -friends-> fu2
		}
	}
	
	target {
		iu1 : User {
			-follows-> iu2
		}
		iu2 : User {
			++ -follows-> iu1
		}
		in : Network {
			-users-> iu1
			-users-> iu2
		}
	}
	
	correspondence {
		fn <-:NetworkToNetwork-> in 
		fu1 <-:FbUserToInUser-> iu1
		fu2 <-:FbUserToInUser-> iu2
	}
} forbid src(noDoubleFriendshipFacebook)

pattern noDoubleFriendshipFacebook {
	fn:FacebookLanguage.Network {
		-friendships->other
	}
	
	fu1 : FacebookLanguage.User
	
	fu2 : FacebookLanguage.User
	
	other : Friendship {
		-friends-> fu1
		-friends-> fu2
	}
}

pattern noDoubleFriendshipFacebookConstraint 
	-> noDoubleFriendshipFacebook, noDoubleFriendshipFacebook [other -> one]

constraint noDoubleFriendship = forbid noDoubleFriendshipFacebookConstraint

pattern noDoubleFollowershipInstagramConstraint {
	iu1 : InstagramLanguage.User
	
	iu2 : InstagramLanguage.User {
		-follows-> iu1
		-follows-> iu1
	}
}
	 
constraint noDoubleFollowership = forbid noDoubleFollowershipInstagramConstraint






